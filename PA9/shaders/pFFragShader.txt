#version 330

in vec3 fN;
in vec3 fL;
in vec3 fE;

in vec2 texture;

uniform sampler2D sampler;

uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 modelMatrix;
uniform vec4 AmbientProduct;
uniform vec4 DiffuseProduct;
uniform vec4 SpecularProduct;
uniform vec4 LightPosition;
uniform float Shininess;

void main(void)
{
	vec3 N = normalize( (viewMatrix * modelMatrix) * vec4(fN, 0.0) ).xyz;
	vec3 E = normalize(fE);
	vec3 L = normalize(fL);

	vec3 H = normalize(L+E);

	vec4 ambient = AmbientProduct;

	float Kd = max(dot(L,N),0.0);

	vec4 diffuse = Kd*DiffuseProduct;
	
	float Ks = pow(max(dot(N,H),0.0),Shininess);

	vec4 specular = Ks*SpecularProduct;

	if( dot(L,N) < 0.0 )
	{
		specular = vec4(0.0, 0.0, 0.0, 1.0);
	}
	
	gl_FragColor = (ambient + diffuse + specular);
	gl_FragColor = gl_FragColor * texture2D(sampler,texture.xy);
	gl_FragColor.a = 1.0;
}
