#version 330

layout (location = 0) in vec4 vPosition;
layout (location = 1) in vec3 vNormal;
layout (location = 2) in vec2 v_texture;

out vec4 color; 
out vec2 texture;

uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 modelMatrix;

uniform vec4 AmbientProduct;
uniform vec4 DiffuseProduct;
uniform vec4 SpecularProduct;
uniform vec4 LightPosition;
uniform vec3 SpotLight;
uniform float Shininess;
uniform float cutOff;
uniform float Brightness;

void main(void)
{
	// Transform vertex position into eye coordinates
	vec3 pos = ((viewMatrix * modelMatrix) * vPosition).xyz;

	vec3 L = normalize( LightPosition.xyz - pos );

	vec3 E = normalize( -pos );

	vec3 H = normalize( L + E );

	// Transform vertex normal into eye coordinates

	vec3 N = normalize(viewMatrix*modelMatrix*vec4(vNormal, 0.0)).xyz;
	
// Compute terms
	vec4 ambient = AmbientProduct;

	float Kd = max( dot(L, N), 0.0 );

	vec4 diffuse = Kd*DiffuseProduct;

	float Ks = pow( max(dot(N, H), 0.0), Shininess );

	vec4 specular = Ks * SpecularProduct;

	if( dot(L, N) < 0.0 ) specular = vec4(0.0, 0.0, 0.0, 1.0);

//spot light
	vec3 v_pos = (modelMatrix * vPosition).xyz;
	float length = distance(v_pos.xz, SpotLight.xz);
	float degree = atan(length,30);

	if(degree<cutOff)
	{
			diffuse*=Brightness;
			specular*=Brightness;
	}


	gl_Position = (projectionMatrix * viewMatrix * modelMatrix) * vPosition;

	color = ambient + diffuse + specular;

	color.a = 1.0;

	texture = v_texture;
}
